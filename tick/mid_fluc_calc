#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Nov 29 10:02:44 2017

@author: okadatomoki
"""

import numpy as np
import pandas as pd
import datetime
import time
import os

def mid_price_getter(path):

    tick_data = pd.read_csv(path, header=None)

    # タイムスタンプのdatetime化、unix timeへ変換
    date = tick_data[1]
    _time = tick_data[7]
    sec = tick_data[9]

    time_stamp = []
    unix_time = []
    for i in range(len(tick_data)):
        year = int(str(date[i])[:4])
        month = int(str(date[i])[4:6])
        day = int(str(date[i])[6:])
        hour = int(str(_time[i])[:-2])
        minute = int(str(_time[i])[-2:])
        second = sec[i]
        d = datetime.datetime(year, month, day, hour, minute, second)
        time_stamp.append(d)
        unix_time.append(time.mktime(d.timetuple()))

    # pandas series化
    time_stamp_se = pd.Series(time_stamp)    
    unix_time_se = pd.Series(unix_time)
        
    # 仲値の計算
    best_ask = tick_data[27]
    best_bid = tick_data[16]
    mid_price = (best_ask + best_bid)/2
    mid_price = mid_price.dropna()

    # データの結合(タイムスタンプ+ユニックスタイム+仲値)
    mid_price_df = pd.concat([time_stamp_se, unix_time_se, mid_price], axis=1)
    mid_price_df.columns = ['time_stamp', 'unix_time', 'mid_price']

    # 東証の開場時間のデータのみを抽出
    zenba_from = datetime.datetime(year, month, day, 9)
    zenba_to = datetime.datetime(year, month, day, 11, 30)
    goba_from = datetime.datetime(year, month, day, 12, 30)
    goba_to = datetime.datetime(year, month, day, 15)
    zenba_filter = (zenba_from <= mid_price_df['time_stamp']) & (mid_price_df['time_stamp'] <= zenba_to)
    goba_filter = (goba_from <= mid_price_df['time_stamp']) & (mid_price_df['time_stamp'] <= goba_to)
    _filter = zenba_filter | goba_filter
    
    opening_data = mid_price_df[_filter]
    opening_data = opening_data.dropna()

    # インデックス整理
    opening_data.index = range(len(opening_data))
    
    return opening_data
    
def mid_price_fluctuation(opening_data):
    # 仲値の上昇or下降する時のタイムスタンプを抽出
    upward_time = []
    upward_unix_time = []
    downward_time = []
    downward_unix_time = []

    for i in range(1,len(opening_data)):
        if opening_data['mid_price'][i] - opening_data['mid_price'][i-1] > 0:
            upward_time.append(opening_data['time_stamp'][i])
            upward_unix_time.append(opening_data['unix_time'][i])
        elif opening_data['mid_price'][i] - opening_data['mid_price'][i-1] < 0:
            downward_time.append(opening_data['time_stamp'][i])
            downward_unix_time.append(opening_data['unix_time'][i])
        
    # pandas series化
    #upward_time_se = pd.Series(upward_time)
    upward_unix_time_se = pd.Series(upward_unix_time)
    #downward_time_se = pd.Series(downward_time)
    downward_unix_time_se = pd.Series(downward_unix_time)

    # 同じ時間のデータを線形補間する
    for i in range(len(upward_unix_time_se)-1):
        count = 1
        for j in range(100):
            if i+j+1 < len(upward_unix_time_se):
                if upward_unix_time_se[i] == upward_unix_time_se[i+j+1]:
                    count += 1
                else:
                    break
        if count > 1:
            for k in range(1,count):
                upward_unix_time_se[i+k] = upward_unix_time_se[i] + 1/count*k

    for i in range(len(downward_unix_time_se)-1):
        count = 1
        for j in range(100):
            if i+j+1 < len(downward_unix_time_se):
                if downward_unix_time_se[i] == downward_unix_time_se[i+j+1]:
                    count += 1
                else:
                    break
        if count > 1:
            for k in range(1,count):
                downward_unix_time_se[i+k] = downward_unix_time_se[i] + 1/count*k

    return upward_unix_time_se, downward_unix_time_se

def aggregator(upward_time_se, downward_time_se):  
    # 集計
    upward_counts = pd.DataFrame({'counts': np.ones(len(upward_time_se))}, index=upward_time_se)
    downward_counts = pd.DataFrame({'counts': np.ones(len(downward_time_se))}, index=downward_time_se)
    upward_empirical_1min = upward_counts.resample('1min', how='sum')
    downward_empirical_1min = downward_counts.resample('1min', how='sum')
    
    return upward_empirical_1min, downward_empirical_1min
    
if __name__ == '__main__':
    path = '9984/'
    file_list = files = os.listdir(path)
    for li in file_list:
        opening_data = mid_price_getter(path)
        upward_unix_time_se, downward_unix_time_se = mid_price_fluctuation(opening_data)
        li = li.replace('.csv', '')
        os.mkdir(li)
        upward_unix_time_se.to_csv('mid_fluc/'+ li +'/upward.csv', index=False)
        downward_unix_time_se.to_csv('mid_fluc/'+ li +'/downward.csv', index=False)
        
        
    